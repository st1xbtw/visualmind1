import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.markdown import hbold
from aiogram.client.default import DefaultBotProperties
from datetime import datetime
import random
import asyncio
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "7674146920:AAGeXErfsN2FqmwG-q82esQ_FAzGSH7Wjeg"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
MANAGER_USERNAME = "lonufaal"  # –ë–µ–∑ @
ORDERS_FILE = "orders.txt"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
orders_db = {}  # {order_id: order_data}
users_orders = {}  # {user_id: [order_id1, order_id2]}

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–∫–∞–∑–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if not os.path.exists(ORDERS_FILE):
    with open(ORDERS_FILE, "w", encoding="utf-8") as f:
        f.write("")


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class OrderStates(StatesGroup):
    waiting_for_service_type = State()
    waiting_for_service_details = State()
    waiting_for_ad_duration = State()


# –°–µ—Ä–≤–∏—Å—ã –∏ –∏—Ö —Ç–∏–ø—ã
SERVICES = {
    "video": ["–≠–¥–∏—Ç", "–ú–æ–Ω—Ç–∞–∂", "–†–µ–∫–ª–∞–º–Ω—ã–π —Ä–æ–ª–∏–∫", "–î—Ä—É–≥–æ–µ"],
    "photo": ["–ê–≤–∞—Ç–∞—Ä–∫–∞", "–î–∏–∑–∞–π–Ω", "–î—Ä—É–≥–æ–µ"],
    "ad": ["–ü–æ—Å—Ç"]
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ñ–∞–π–ª
def save_order_to_file(order_data):
    with open(ORDERS_FILE, "a", encoding="utf-8") as f:
        f.write(f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - {order_data}\n")


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu():
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="üé• –ó–∞–∫–∞–∑ –≤–∏–¥–µ–æ"),
        types.KeyboardButton(text="üì∏ –ó–∞–∫–∞–∑ —Ñ–æ—Ç–æ"),
    )
    builder.row(
        types.KeyboardButton(text="üì¢ –†–µ–∫–ª–∞–º–∞"),
    )
    builder.row(
        types.KeyboardButton(text="üí° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π"),
        types.KeyboardButton(text="‚ùì FAQ"),
    )
    builder.row(
        types.KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
        types.KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã"),
    )
    return builder.as_markup(resize_keyboard=True)


async def show_main_menu(chat_id, first_name):
    await bot.send_message(
        chat_id=chat_id,
        text=f"üëã –ü—Ä–∏–≤–µ—Ç, {hbold(first_name)}!\n–Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é: üé• –í–∏–¥–µ–æ - üì∏ –§–æ—Ç–æ - üì¢ –†–µ–∫–ª–∞–º–∞",
        reply_markup=get_main_menu()
    )


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    if user_id not in users_orders:
        users_orders[user_id] = []

    await show_main_menu(message.chat.id, message.from_user.first_name)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
@dp.message(F.text.in_(["üé• –ó–∞–∫–∞–∑ –≤–∏–¥–µ–æ", "üì∏ –ó–∞–∫–∞–∑ —Ñ–æ—Ç–æ", "üì¢ –†–µ–∫–ª–∞–º–∞"]))
async def select_service(message: Message, state: FSMContext):
    service_map = {
        "üé• –ó–∞–∫–∞–∑ –≤–∏–¥–µ–æ": "video",
        "üì∏ –ó–∞–∫–∞–∑ —Ñ–æ—Ç–æ": "photo",
        "üì¢ –†–µ–∫–ª–∞–º–∞": "ad"
    }
    service_type = service_map[message.text]

    builder = InlineKeyboardBuilder()
    for service in SERVICES[service_type]:
        builder.add(types.InlineKeyboardButton(
            text=service,
            callback_data=f"type_{service_type}_{service}"
        ))
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_main_menu"
    ))
    builder.adjust(2)

    await state.update_data(service_type=service_type)
    await state.set_state(OrderStates.waiting_for_service_type)
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø {service_type}:",
        reply_markup=builder.as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await show_main_menu(callback.message.chat.id, callback.from_user.first_name)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏
@dp.callback_query(F.data.startswith("type_"), OrderStates.waiting_for_service_type)
async def select_service_type(callback: CallbackQuery, state: FSMContext):
    _, service_type, service_name = callback.data.split("_", 2)
    await state.update_data(service_name=service_name)

    if service_type == "ad":
        builder = InlineKeyboardBuilder()
        durations = [("1 –¥–µ–Ω—å - 350‚ÇΩ", 1), ("3 –¥–Ω—è - 600‚ÇΩ", 3),
                     ("7 –¥–Ω–µ–π - 1200‚ÇΩ", 7), ("14 –¥–Ω–µ–π - 2000‚ÇΩ", 14)]
        for text, days in durations:
            builder.add(types.InlineKeyboardButton(
                text=text,
                callback_data=f"duration_{days}"
            ))
        builder.add(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_main_menu"
        ))
        builder.adjust(2)

        await state.set_state(OrderStates.waiting_for_ad_duration)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã:",
            reply_markup=builder.as_markup()
        )
    else:
        await state.set_state(OrderStates.waiting_for_service_details)
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {service_name}\n\n"
            "–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n"
            "- –ü–æ–∂–µ–ª–∞–Ω–∏—è\n- –†–µ—Ñ–µ—Ä–µ–Ω—Å—ã\n- –û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Å–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
        )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã
@dp.callback_query(F.data.startswith("duration_"), OrderStates.waiting_for_ad_duration)
async def select_ad_duration(callback: CallbackQuery, state: FSMContext):
    days = int(callback.data.split("_")[1])
    await state.update_data(days=days)
    await state.set_state(OrderStates.waiting_for_service_details)
    await callback.message.edit_text(
        "–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞:\n"
        "- –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞\n- –°—Å—ã–ª–∫–∏\n- –ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Å–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
@dp.message(OrderStates.waiting_for_service_details)
async def process_order_details(message: Message, state: FSMContext):
    user_data = await state.get_data()
    service_type = user_data["service_type"]
    details = message.text

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–Ω—ã –∏ —Å—Ä–æ–∫–∞
    if service_type == "video":
        price = random.randint(500, 1000)
        days = random.randint(1, 3)
    elif service_type == "photo":
        price = random.randint(150, 300)
        days = random.randint(1, 3)
    elif service_type == "ad":
        days = user_data.get("days", 1)
        price = 350 if days == 1 else \
            600 if days == 3 else \
                1200 if days == 7 else \
                    2000 if days == 14 else 350

    await state.update_data(
        details=details,
        price=price,
        days=days
    )

    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_order"),
        types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_order"),
    )

    order_info = (
        f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n"
        f"–¢–∏–ø: {user_data['service_name']}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±\n"
        f"–°—Ä–æ–∫: {days} –¥–Ω–µ–π\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{details}"
    )

    await message.answer(
        order_info,
        reply_markup=builder.as_markup()
    )


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@dp.callback_query(F.data == "confirm_order")
async def confirm_order(callback: CallbackQuery, state: FSMContext):
    user = callback.from_user
    user_data = await state.get_data()

    order_id = f"order_{random.randint(1000, 9999)}"
    order_data = {
        "id": order_id,
        "user_id": user.id,
        "username": user.username or "–Ω–µ—Ç username",
        "first_name": user.first_name,
        "service": user_data["service_type"],
        "service_name": user_data["service_name"],
        "price": user_data["price"],
        "days": user_data["days"],
        "details": user_data["details"],
        "status": "–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
    orders_db[order_id] = order_data
    if user.id not in users_orders:
        users_orders[user.id] = []
    users_orders[user.id].append(order_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    save_order_to_file(order_data)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    order_text = (
        f"üìã –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n"
        f"üë§ –ö–ª–∏–µ–Ω—Ç: @{order_data['username']} ({order_data['first_name']})\n"
        f"üìå –£—Å–ª—É–≥–∞: {order_data['service_name']}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {order_data['price']} —Ä—É–±\n"
        f"‚è≥ –°—Ä–æ–∫: {order_data['days']} –¥–Ω–µ–π\n"
        f"üìù –î–µ—Ç–∞–ª–∏:\n{order_data['details']}\n\n"
        f"üÜî ID: {user.id}"
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.edit_text(
        "‚úÖ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\n\n"
        "–ß—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É:\n"
        f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç —Å @{MANAGER_USERNAME}\n"
        "2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –µ–º—É —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"{order_text}\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
        "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
        parse_mode=ParseMode.HTML
    )

    await state.clear()


# –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
@dp.callback_query(F.data == "cancel_order")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
    await state.clear()


# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.message(F.text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: Message):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É",
        url=f"https://t.me/{MANAGER_USERNAME}"
    ))
    await message.answer(
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
        reply_markup=builder.as_markup()
    )


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π
@dp.message(F.text == "üí° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π")
async def idea_generator_start(message: Message):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üé• –î–ª—è –≤–∏–¥–µ–æ", callback_data="idea_video"),
        types.InlineKeyboardButton(text="üì∏ –î–ª—è —Ñ–æ—Ç–æ", callback_data="idea_photo"),
    )
    builder.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")
    )
    builder.adjust(2)

    await message.answer(
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data.startswith("idea_"))
async def generate_idea_handler(callback: CallbackQuery):
    idea_type = callback.data.split("_")[-1]

    if idea_type == "video":
        builder = InlineKeyboardBuilder()
        for service in SERVICES["video"]:
            builder.add(types.InlineKeyboardButton(
                text=service,
                callback_data=f"video_idea_{service}"
            ))
        builder.add(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_idea_menu"
        ))
        builder.adjust(2)

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–¥–µ–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π:",
            reply_markup=builder.as_markup()
        )
    elif idea_type == "photo":
        builder = InlineKeyboardBuilder()
        for service in SERVICES["photo"]:
            builder.add(types.InlineKeyboardButton(
                text=service,
                callback_data=f"photo_idea_{service}"
            ))
        builder.add(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_idea_menu"
        ))
        builder.adjust(2)

        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π:",
            reply_markup=builder.as_markup()
        )


@dp.callback_query(F.data.startswith(("video_idea_", "photo_idea_")))
async def show_ideas(callback: CallbackQuery):
    idea_type, _, service = callback.data.split("_", 2)
    ideas = {
        "video": {
            "–≠–¥–∏—Ç": [
                "–≠–¥–∏—Ç –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏ —á–∞—Å—Ç–∏—Ü",
                "–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —ç–¥–∏—Ç —Å –ø–ª–∞–≤–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏",
                "–≠–¥–∏—Ç –ø–æ–¥ –¥–∏–Ω–∞–º–∏—á–Ω—É—é –º—É–∑—ã–∫—É —Å —Ä–µ–∑–∫–∏–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏",
                "–≠–¥–∏—Ç –≤ —Ä–µ—Ç—Ä–æ —Å—Ç–∏–ª–µ —Å VHS —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"
            ],
            "–ú–æ–Ω—Ç–∞–∂": [
                "–ú–æ–Ω—Ç–∞–∂ –∫–ª–∏–ø–æ–≤ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Ö—Ä–æ–º–∞–∫–µ–π",
                "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å —Å –∑–∞–∫–∞–¥—Ä–æ–≤—ã–º –≥–æ–ª–æ—Å–æ–º",
                "–ú–æ–Ω—Ç–∞–∂ –≤ —Å—Ç–∏–ª–µ —Ç–∏–∫—Ç–æ–∫ —Å —Ç—Ä–µ–Ω–¥–æ–≤—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏"
            ],
            "–†–µ–∫–ª–∞–º–Ω—ã–π —Ä–æ–ª–∏–∫": [
                "–†–æ–ª–∏–∫ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç (–∫—Ä—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã)",
                "–†–µ–∫–ª–∞–º–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤",
                "–ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ä–æ–ª–∏–∫"
            ]
        },
        "photo": {
            "–ê–≤–∞—Ç–∞—Ä–∫–∞": [
                "–ê–≤–∞—Ç–∞—Ä–∫–∞ –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ-–ø–µ—Ä—Å–æ–Ω–∞–∂–∞",
                "–ê–≤–∞—Ç–∞—Ä–∫–∞ —Å –≥–µ—Ä–æ–µ–º –∏–∑ —Ñ–∏–ª—å–º–∞",
                "–ê–≤–∞—Ç–∞—Ä–∫–∞ –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ",
                "–ê–≤–∞—Ç–∞—Ä–∫–∞ —Å –Ω–µ–æ–Ω–æ–≤—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏",
                "–ê–≤–∞—Ç–∞—Ä–∫–∞ –≤ —Å—Ç–∏–ª–µ –ø–∏–∫—Å–µ–ª—å-–∞—Ä—Ç"
            ],
            "–î–∏–∑–∞–π–Ω": [
                "–î–∏–∑–∞–π–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏",
                "–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –∞–∫—Ü–µ–Ω—Ç–∞–º–∏",
                "–î–∏–∑–∞–π–Ω –≤ —Å—Ç–∏–ª–µ —Ä–µ—Ç—Ä–æ-—Ñ—É—Ç—É—Ä–∏–∑–º"
            ]
        }
    }

    idea = random.choice(ideas[idea_type][service])

    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üîÅ –î—Ä—É–≥–∞—è –∏–¥–µ—è", callback_data=callback.data),
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_{idea_type}_ideas")
    )

    await callback.message.edit_text(
        f"üí° –ò–¥–µ—è –¥–ª—è {service}:\n\n{idea}",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data == "back_to_idea_menu")
async def back_to_idea_menu(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üé• –î–ª—è –≤–∏–¥–µ–æ", callback_data="idea_video"),
        types.InlineKeyboardButton(text="üì∏ –î–ª—è —Ñ–æ—Ç–æ", callback_data="idea_photo"),
    )
    builder.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")
    )
    builder.adjust(2)

    await callback.message.edit_text(
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data == "back_to_video_ideas")
async def back_to_video_ideas(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    for service in SERVICES["video"]:
        builder.add(types.InlineKeyboardButton(
            text=service,
            callback_data=f"video_idea_{service}"
        ))
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_idea_menu"
    ))
    builder.adjust(2)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–¥–µ–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data == "back_to_photo_ideas")
async def back_to_photo_ideas(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    for service in SERVICES["photo"]:
        builder.add(types.InlineKeyboardButton(
            text=service,
            callback_data=f"photo_idea_{service}"
        ))
    builder.add(types.InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_idea_menu"
    ))
    builder.adjust(2)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–æ—Ç–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–¥–µ–π:",
        reply_markup=builder.as_markup()
    )


# FAQ
@dp.message(F.text == "‚ùì FAQ")
async def faq_start(message: Message):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data="faq_video"),
        types.InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ", callback_data="faq_photo"),
    )
    builder.add(
        types.InlineKeyboardButton(text="üì¢ –†–µ–∫–ª–∞–º–∞", callback_data="faq_ad"),
    )
    builder.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")
    )
    builder.adjust(2)

    await message.answer(
        "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é FAQ:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data.startswith("faq_"))
async def show_faq(callback: CallbackQuery):
    faq_type = callback.data.split("_")[-1]
    faq_texts = {
        "video": (
            "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤–∏–¥–µ–æ:\n\n"
            "1. –ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é –º—É–∑—ã–∫—É?\n"
            "   - –î–∞, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—é –º—É–∑—ã–∫—É\n\n"
            "2. –ö–∞–∫–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è?\n"
            "   - –û–±—ã—á–Ω–æ 1-3 –¥–Ω—è\n\n"
            "3. –ú–æ–∂–Ω–æ –ª–∏ –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è?\n"
            "   - –î–∞, 1-2 –ø—Ä–∞–≤–∫–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å"
        ),
        "photo": (
            "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ–æ—Ç–æ:\n\n"
            "1. –ö–∞–∫–∏–µ —Å—Ç–∏–ª–∏ –∞–≤–∞—Ç–∞—Ä–æ–∫ –≤—ã –¥–µ–ª–∞–µ—Ç–µ?\n"
            "   - –ê–Ω–∏–º–µ, –∫–∏–Ω–æ, –∏–≥—Ä—ã –∏ –¥—Ä—É–≥–∏–µ —Å—Ç–∏–ª–∏\n\n"
            "2. –ù—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏?\n"
            "   - –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –ø–æ –∂–µ–ª–∞–Ω–∏—é\n\n"
            "3. –ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ?\n"
            "   - PNG, JPG, WEBP –Ω–∞ –≤—ã–±–æ—Ä"
        ),
        "ad": (
            "‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–µ–∫–ª–∞–º–µ:\n\n"
            "1. –ú–æ–∂–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏?\n"
            "   - –î–∞, 1 –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 12 —á–∞—Å–æ–≤\n\n"
            "2. –ö–∞–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤?\n"
            "   - –¢–µ–∫—Å—Ç + —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ, –∫–∞—Ä—É—Å–µ–ª—å, –æ–ø—Ä–æ—Å—ã\n\n"
            "3. –ï—Å—Ç—å –ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º?\n"
            "   - –î–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )
    }

    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_faq_menu")
    )

    await callback.message.edit_text(
        faq_texts[faq_type],
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data == "back_to_faq_menu")
async def back_to_faq_menu(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data="faq_video"),
        types.InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ", callback_data="faq_photo"),
    )
    builder.add(
        types.InlineKeyboardButton(text="üì¢ –†–µ–∫–ª–∞–º–∞", callback_data="faq_ad"),
    )
    builder.add(
        types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")
    )
    builder.adjust(2)

    await callback.message.edit_text(
        "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é FAQ:",
        reply_markup=builder.as_markup()
    )


# –ú–æ–∏ –∑–∞–∫–∞–∑—ã
@dp.message(F.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
@dp.message(Command("myorders"))
async def my_orders(message: Message):
    user_id = message.from_user.id
    if user_id not in users_orders or not users_orders[user_id]:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    orders_list = []
    for order_id in users_orders[user_id]:
        order = orders_db.get(order_id)
        if order:
            orders_list.append(
                f"üîπ #{order_id} - {order['service_name']} ({order['status']})"
            )

    if not orders_list:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    await message.answer(
        "üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n" + "\n".join(orders_list),
        parse_mode=ParseMode.HTML
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    asyncio.run(main())